package com.aisino.aitss.utils;

import sun.misc.BASE64Decoder;
import sun.misc.BASE64Encoder;

/**
 * @author Du Yue Kun
 * 
 */
public class Base64 {

    public static String encode(String content) {
        String result = null;

        try {
            result = new BASE64Encoder().encode(content.getBytes("UTF-8"))
                    .replaceAll("\\s", "");
        } catch (Exception e) {
            e.printStackTrace();
        }

        return result;
    }

    public static byte[] decode(String content) {
        byte[] result = null;

        try {
            result = new BASE64Decoder().decodeBuffer(content);
        } catch (Exception e) {
            e.printStackTrace();
        }

        return result;
    }

    public static String encode(byte[] content) {
        String result = new BASE64Encoder().encode(content).replaceAll("\\s",
                "");
        return result;
    }

    public static char[] toBASE64(byte[] message) {
        int resultlen = (message.length / 3) * 4;

        if (message.length % 3 != 0) {
            resultlen = resultlen + 4;
        }

        resultlen = resultlen + (resultlen / 64) * 2;
        char[] result = new char[resultlen];
        char ret[] = { 0x0d, 0x0a };
        char uue[] = { 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K',
                'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W',
                'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i',
                'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u',
                'v', 'w', 'x', 'y', 'z', '0', '1', '2', '3', '4', '5', '6',
                '7', '8', '9', '+', '/' };
        int line = 0;
        int i;
        int j = 0;
        int a1, a2, a3;

        for (i = 0; i < message.length; i = i + 3) {
            a1 = (int) message[i];

            if (i + 1 < message.length) {
                a2 = (int) message[i + 1];

                if (i + 2 < message.length) {
                    a3 = (int) message[i + 2];
                } else {
                    a3 = 0;
                }
            } else {
                a2 = 0;
                a3 = 0;
            }

            result[j] = uue[(a1 & 252) / 4];
            j++;
            result[j] = uue[(a1 & 3) * 16 + (a2 & 240) / 16];
            j++;

            if (i + 1 < message.length) {
                result[j] = uue[(a2 & 15) * 4 + (a3 & 192) / 64];
                j++;

                if (i + 2 < message.length) {
                    result[j] = uue[(a3 & 63)];
                    j++;
                } else {
                    result[j] = '=';
                    j++;
                }
            } else {
                result[j] = '=';
                j++;
                result[j] = '=';
                j++;
            }

            line = line + 4;

            if (line == 64) {
                result[j] = ret[0];
                j++;
                result[j] = ret[1];
                j++;
                line = 0;
            }
        }

        return result;
    }

    public static byte[] fromBASE64(char[] base64) {
        char[] in;
        int inlen = base64.length;
        in = new char[inlen];
        int i = 0;
        int j = 0;

        for (; i < base64.length; i++) {
            if (base64[i] != 0x0a && base64[i] != 0x0d) {
                in[j] = base64[i];
                j++;
            }
        }

        inlen = j;

        if (inlen % 4 != 0) {
            System.err.println("fromBASE64: Length error!");
            return null;
        }

        int len = inlen / 4 * 3;

        if (in[inlen - 1] == '=') {
            len--;
        }

        if (in[inlen - 2] == '=') {
            len--;
        }

        byte[] result = new byte[len];
        String uue = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
        int b1, b2, b3, b4;
        char c1, c2, c3;
        int d1, d2, d3;
        i = 0;
        j = 0;

        for (; i < inlen - 4; i = i + 4) {
            b1 = uue.indexOf(in[i]);
            b2 = uue.indexOf(in[i + 1]);
            b3 = uue.indexOf(in[i + 2]);
            b4 = uue.indexOf(in[i + 3]);
            d1 = b2 / 16 | 4 * b1;
            d2 = 16 * b2 | b3 / 4;
            d3 = 64 * b3 | b4;
            c1 = (char) d1;
            c2 = (char) d2;
            c3 = (char) d3;
            result[j] = (byte) c1;
            j++;
            result[j] = (byte) c2;
            j++;
            result[j] = (byte) c3;
            j++;
        }

        if (in[i + 2] == '=') {
            b1 = uue.indexOf(in[i]);
            b2 = uue.indexOf(in[i + 1]);
            d1 = b2 / 16 | 4 * b1;
            c1 = (char) d1;
            result[j] = (byte) c1;
            j++;
        } else {
            if (in[i + 3] == '=') {
                b1 = uue.indexOf(in[i]);
                b2 = uue.indexOf(in[i + 1]);
                b3 = uue.indexOf(in[i + 2]);
                d1 = b2 / 16 | 4 * b1;
                d2 = 16 * b2 | b3 / 4;
                c1 = (char) d1;
                c2 = (char) d2;
                result[j] = (byte) c1;
                j++;
                result[j] = (byte) c2;
                j++;
            } else {
                b1 = uue.indexOf(in[i]);
                b2 = uue.indexOf(in[i + 1]);
                b3 = uue.indexOf(in[i + 2]);
                b4 = uue.indexOf(in[i + 3]);
                d1 = b2 / 16 | 4 * b1;
                d2 = 16 * b2 | b3 / 4;
                d3 = 64 * b3 | b4;
                c1 = (char) d1;
                c2 = (char) d2;
                c3 = (char) d3;
                result[j] = (byte) c1;
                j++;
                result[j] = (byte) c2;
                j++;
                result[j] = (byte) c3;
                j++;
            }
        }

        return result;
    }

}
